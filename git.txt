GIT TUTORIAL THE BEST!!!!!!!!!!!!
https://learngitbranching.js.org/
######################################################
#####################################################
######################################################


###################
Move one branch to another - including its commits
###################

git rebase A B
--------------
rebase - move
A - to where (branch)
B - what (branch)






###################
Moving a branch pointer to another commit -> git branch -f <branch-name> <sha1-commit-hash>
https://www.w3docs.com/snippets/git/how-to-move-branch-pointer-to-different-commit.html
###################

If you want to move a non-checked out branch to another commit, the easiest way is running the git 
branch command with -f option, which determines where the branch HEAD should be pointing to:

****** git branch -f <branch-name> <sha1-commit-hash/ or branch name> ******

Be careful as this won't work if the branch you gare trying to move is your current branch.
To move a branch pointer, run the following command:

git update-ref -m "reset: Reset <branch-name> to <sha1-commit-hash>" refs/heads/<branch-name> <sha1-commit-hash>

The git update-ref command updates the object name stored in a ref safely.


###################
Pick specific sha1-commit-hash and relocated them -> git cherry-pick <sha1-commit-hash> <sha1-commit-hash> ...
###################

******** git cherry-pick commithash1 commithash2 commithashn ***********

this will take it in exact order i say can be C4, C2, C10 and relocate them under the branch/hash 
I am currently another




###################
git checkout <hashCommit>    OR  git checkout <NameBranch>
###################






###################
git merge <o/main>   (o - origin --> remote repository) 
###################
I suppose when on a certain branch then this command calls another branch/commit and merge
with this current branch.



###################################

###################
git pull     =   git fetch and git merge together   
###################

###################
git pull --rebase     =   git fetch and git rebase together   
###################

Of course -- you already know git pull is just shorthand for a fetch and a merge. 
Conveniently enough, git pull --rebase is shorthand for a fetch and a rebase!

############################
HOW TO RUN "git add .", "git commit -m "message"", "git push origin branchName"
  https://panjeh.medium.com/makefile-git-add-commit-push-github-all-in-one-command-9dcf76220f48
Put all git add, git commit, git push command in a makefile, In just 3 simple steps as follow:
Step 1:
You need just to make a “makefile” in your project directory. Attention: makefile does not have any extension. Just “makefile” that’s it.
In Linux or Mac you can create a makefile using:

----->       touch makefile

Step 2:
put these commands in that makefile:
Check this github link to get access to the script.
Attention: Each line after the first line, I mean (git :) , is starting with a tab and not space. Something Like this:

git:
    git add .
    git commit -m "$m"
    git push -u origin master 


NOTE: For putting a long message with a title and body refer to Step 4.

Step 3:
In terminal do this:
make git m="your message"
and you will see such message in terminal:


Step 4: (Optional)
Sometimes the git message has a long body and you want to divide it into multiple lines.
In such scenario the best practice is to write a short message as the title and the rest long part of the message as the body when you do the git commit.
How to do this with one git command?

Instead of what you put in the makefile in step 3 put this new one:

git:
    git add .
    git commit -m "$t" -m "$b"
    git push -u origin master 

As you see above I used -m twice! The first one assumed as the title $tand the second one assumed as the body $b.
How to use? Just after create the makefile in the root of your project, in the terminal run this:

    make git t="title" b="long body"


#####################################
WAY #1 
We will checkout a new branch named foo and set it to track main on the remote.
git checkout -b foo o/main; git pull

git checkout -b foo o/main; git commit; git push
We pushed our work to the main on the remote even though our branch was named something totally different.


WAY #2
Another way to set remote tracking on a branch is to simply use the git branch -u option. Running
git branch -u o/main foo

will set the foo branch to track o/main. If foo is currently checked out you can even leave it off:
git branch -u o/main



###########################################
###############
git push <remote> <place>
###############

git push origin main

translates to this in English:

Go to the branch named "main" in my repository, grab all the commits, and then go to the branch 
"main" on the remote named "origin". Place whatever commits are missing on that branch and then 
tell me when you're done.

By specifying main as the "place" argument, we told git where the commits will come from and where 
the commits will go. It's essentially the "place" or "location" to synchronize between the two 
repositories.

Keep in mind that since we told git everything it needs to know (by specifying both arguments), 
it totally ignores where we are checked out!


