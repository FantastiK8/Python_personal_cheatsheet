###################################
# LISTS and ARRAYS
# https://note.nkmk.me/en/python-list-append-extend-insert/
# https://www.programiz.com/python-programming/methods/list/copy
# this link has valid explanations of each METHOD of list https://www.programiz.com/python-programming/methods/list/remove
# this link has many other things from python!!! https://www.learnbyexample.org/python-list/
###################################

#####Python List METHODS:

# Python List index()
# Python List append()
# Python List extend()
# Python List insert()
# Python List remove()
# Python List count()
# Python List pop()
# Python List reverse()
# Python List sort()
# Python List copy()
# Python List clear()


# Add an item to the end: append()
# Combine lists: extend(), + operator
# Insert an item at specified index: insert()
# Add another list or tuple at specified index: slice
# NOTE insert() is an O(n) operation and is not efficient. 

# For removing elements from a list: 
# Remove a specific item from the list .remove() 
# Remove the last item .pop(). BUT ALSO WORKS AT SPECIFIC POSSITION .pop(index)
# 
#examples: 
### .append()

l = list(range(3))
print(l)
# [0, 1, 2]

l.append(100)
print(l)
# [0, 1, 2, 100]

l.append('new')
print(l)
# [0, 1, 2, 100, 'new']

# A list is also added as one item, not combined.
l.append([3, 4, 5])
print(l)
# [0, 1, 2, 100, 'new', [3, 4, 5]]

### extend(), + operator
# You can combine another list or tuple at the end of the list with extend().
#  All items are added to the end of the original list.

l = list(range(3))
print(l)
# [0, 1, 2]

l.extend([100, 101, 102])
print(l)
# [0, 1, 2, 100, 101, 102]

l.extend((-1, -2, -3))
print(l)
# [0, 1, 2, 100, 101, 102, -1, -2, -3]

#In the case of a string, each character is added one by one.

l.extend('new')
print(l)
# [0, 1, 2, 100, 101, 102, -1, -2, -3, 'n', 'e', 'w']


# insert().
# Set the index for the first parameter and the item to be inserted for 
# the second parameter. The index at the beginning is 0 (zero-based indexing).
# For negative values, -1 means one before the end.
# NOTE that insert() is an O(n) operation and is not efficient. 

# NOTE The deque type is provided in the standard library collections module 
# as a type to add an item to the head with O(1). For example, if you want to treat data as a queue (FIFO), it is more efficient to use deque.

l = list(range(3))
print(l)
# [0, 1, 2]

l.insert(0, 100)
print(l)
# [100, 0, 1, 2]

l.insert(-1, 200)
print(l)
# [100, 0, 1, 200, 2]

# the list is added as a single item, not combined.

l.insert(0, [-1, -2, -3])
print(l)
# [[-1, -2, -3], 100, 0, 1, 200, 2]


##Add another list or tuple at specified index: slice
#If you specify a range using slice and assign another list or tuple, 
# all items will be added.

l = list(range(3))
print(l)
# [0, 1, 2]

l[1:1] = [100, 200, 300]
print(l)
# [0, 100, 200, 300, 1, 2]

#You can also replace the original item. All items in the specified 
# range are replaced.

l = list(range(3))
print(l)
# [0, 1, 2]

l[1:2] = [100, 200, 300]
print(l)
# [0, 100, 200, 300, 2]

###
#The remove() method removes the first matching element (which is passed as 
# an argument) from the list.

#Example
# create a list
prime_numbers = [2, 3, 5, 7, 9, 11]

# remove 9 from the list
prime_numbers.remove(9)


# Updated prime_numbers List
print('Updated List: ', prime_numbers)

# Output: Updated List:  [2, 3, 5, 7, 11]



####=======================
# The copy() method returns a shallow copy of the list.

#Example
# mixed list
prime_numbers = [2, 3, 5]

# copying a list
numbers = prime_numbers.copy()

print('Copied List:', numbers)

# Output: Copied List: [2, 3, 5]


#---------------
# Copy List Using Slicing Syntax
# shallow copy using the slicing syntax

# mixed list
list = ['cat', 0, 6.7]

# copying a list using slicing
new_list = list[:]


# Adding an element to the new list
new_list.append('dog')

# Printing new and old list
print('Old List:', list)
print('New List:', new_list)

# Output

# Old List: ['cat', 0, 6.7]
# New List: ['cat', 0, 6.7, 'dog']



#--------
# List copy using = operator
# NEVER USE = operator for coping lists!!!!
# If you modify new_list, old_list is also modified. It is because 
# the new list is referencing or pointing to the same old_list object.

old_list = [1, 2, 3]

# copy list using =
new_list = old_list


# add an element to list
new_list.append('a')

print('New List:', new_list)
print('Old List:', old_list)

#output
# Old List: [1, 2, 3, 'a']
# New List: [1, 2, 3, 'a']



#==========================
# The index() method returns the index of the specified element in the list.
# Syntax of List index()
# The syntax of the list index() method is:

# list.index(element, start, end)
# list index() parameters
# The list index() method can take a maximum of three arguments:

# element - the element to be searched
# start (optional) - start searching from this index
# end (optional) - search the element up to this index


animals = ['cat', 'dog', 'rabbit', 'horse']

# get the index of 'dog'
index = animals.index('dog')

print(index)

#===========
# List count()
# The count() method returns the number of times the specified element appears in the list.
# create a list
numbers = [2, 3, 5, 2, 11, 2, 7]
# check the count of 2
count = numbers.count(2)
print('Count of 2:', count)

# Output: Count of 2: 3

#===========
# https://thispointer.com/python-reverse-a-list-sub-list-or-list-of-list-in-place-or-copy/#:~:text=Reverse%20the%20contents%20of%20a%20list%20in%20place&text=Python%20list%20class%20provides%20a,through%20which%20it%20is%20called.
# List reverse()
# The reverse() method reverses the elements of the list.
# Reverse a list in place using reverse() function

# Python list class provides a member function reverse(), that reverses the 
# contents of list in place. Here in place means that this function will not 
# create a copy of the existing list, instead it will modify the contents of 
# the list object through which it is called.
#
#Example
# create a list of prime numbers
prime_numbers = [2, 3, 5, 7]

# reverse the order of list elements
prime_numbers.reverse()
print('Reversed List:', prime_numbers)
# Output: Reversed List: [7, 5, 3, 2]


####
# Example 2: Reverse a List Using Slicing Operator
# Operating System List
systems = ['Windows', 'macOS', 'Linux']
print('Original List:', systems)

# Reversing a list	
# Syntax: reversed_list = systems[start:stop:step] 
# Python provides a way to slice a list i.e. selecting specific elements from 
# a list based on occurrence pattern and order. Its syntax is,

list[start:stop:step_size]

reversed_list = systems[::-1]


# updated list
print('Updated List:', reversed_list)
# Output
# Original List: ['Windows', 'macOS', 'Linux']
# Updated List: ['Linux', 'macOS', 'Windows']

####

# Printing Elements in Reversed Order
# NOTE this makes the list itterable.
for o in reversed(systems):
    print(o)

#It accepts a sequence and returns a reversed Iterator of the given sequence. 
# We can use this reverse iterator to iterate over the contents of the sequence, 
# or we can pass this iterator to list() function, to create a new list of 
# reversed contents of the sequence. Let’s use this reversed() function to get 
# a copy of list with reversed contents,

list_of_num = [51, 52, 53, 54, 55, 56, 57, 58, 59]
# Get a list with reversed contents
reversed_list = list(reversed(list_of_num))
print(reversed_list)

Output:
[59, 58, 57, 56, 55, 54, 53, 52, 51]

###
# Get a reversed list using list comprehension
##
# Use list comprehension and range() function, iterate over list in reverse order 
# and push elements to a new list.

list_of_num = [51, 52, 53, 54, 55, 56, 57, 58, 59]
# Iterate over num 0 to size-1 and select elements from back i.e. -i
reversed_list = [list_of_num[-(i+1)] for i in range(len(list_of_num))]
print(reversed_list)

Output:
[59, 58, 57, 56, 55, 54, 53, 52, 51]

####
# Reverse a list of lists
# Suppose we have a list of list i.e.

# list of lists
list_of_list = [[1 , 2, 3, 4, 5],
                [11, 12, 13, 14, 15],
                [21, 22, 23, 24, 25] ]

# Reverse the contents of sub lists / contents of rows in a 2D matrix
# List of list is like a 2D matrix, here we will reverse the content of each row in this 2D matrix,

# Use list comprehension to reverse the contents of sub lists
reversed_list = [elem[::-1] for elem in list_of_list]
print('Reversed List of List')
print(reversed_list)

# Output:
# Reversed List of List
# [[5,   4,  3,  2,  1],
#  [15, 14, 13, 12, 11],
#  [25, 24, 23, 22, 21]]

#Reverse the contents & Order of sub lists

#List of list is like a 2D matrix, here we will reverse the content of each row 
# in this 2D matrix and also the reverse the positions of rows in the matrix,

# Use list comprehension to reverse the contents & order of sub lists
reversed_list = [elem[::-1] for elem in list_of_list ][::-1]
print('Reversed List of List')
print(reversed_list)

# Output:
# [[25, 24, 23, 22, 21],
#  [15, 14, 13, 12, 11],
#  [5,   4,  3,  2, 1]]

#####= amazing
# Reverse a part or slice of a list in Python
# ####
# Suppose we have a list of numbers,
# list of numbers
list_of_num = [51, 52, 53, 54, 55, 56, 57, 58, 59]

#We want to reverse a small portion of the list. Like in the above list we want 
# to reverse the contents from index 2 to 5. result should be like,
[51, 52, 56, 55, 54, 53, 57, 58, 59]

#Now to reverse a part of the list, we will slice the list using [] notation to 
# separate out that part. Then we will reverse that separated out part & merge 
# it back. For example, to reverse the contents of from index a to b, use the 
# following expression,
reversed_list= list_of_num[0:a] + list_of_num[b:a-1:-1] + list_of_num[b+1:]

#let’s see how to reverse the contents from index 2 to 5 in the list,

# Reverse the part of list i.e. from index 2 to 5
reversed_list= list_of_num[0:2] + list_of_num[5:1:-1] + list_of_num[6:]
print('List with reversed part')
print(reversed_list)

# Output:
# List with reversed part
# [51, 52, 56, 55, 54, 53, 57, 58, 59]

###
# Algorithm to reverse list items in place using for loop
###
# In all the above solutions either we used some built-in functions or some tricks. Suppose instead of using any function, we want to implement our algorithm.

# Algorithm which we want to implement is as follows,

# Iterate over items of the list by index position till size /2 and for each element at index i:
# swap values at index i with index -(i+1)
# Let’s see how to implement this algo,

# list of numbers
list_of_num = [51, 52, 53, 54, 55, 56, 57, 58, 59]
# Iterate over items if list by index position
for i in range(int( len(list_of_num) / 2)):
    # Swap items at index i with -(i+1)
    temp = list_of_num[i]
    list_of_num[i] = list_of_num[-(i+1)]
    list_of_num[-(i + 1)] = temp
print(list_of_num)

# Output:
# [59, 58, 57, 56, 55, 54, 53, 52, 51]

## BEUATY CODE :)
# It reversed the contents of the list.
# Now instead of writing 3 lines of code for swapping elements, we can do that 
# in a single line and reverse the contents of list by swapping elements,

list_of_num = [51, 52, 53, 54, 55, 56, 57, 58, 59]
# Iterate over items if list by index position
for i in range(int( len(list_of_num) / 2)):
    # Swap items at index i with -(i+1)
    list_of_num[i], list_of_num[-(i+1)] = list_of_num[-(i+1)],list_of_num[i]


# to reverse a part of the string in place 
a = [1,2,3,4,5]
a[2:4] = reversed(a[2:4])  # This works!
a[2:4] = [0,0]             # This works too.
a[2:4] = a[2:4][::-1]      # This works 


#==================
### SORT AND SORTED!!!!
# NOTE: The simplest difference between sort() and sorted() is: sort()
#  doesn't return any value while, sorted() returns an iterable list.
#The sort() method sorts the elements of a given list in a specific ascending 
# or descending order.

#Example
prime_numbers = [11, 3, 7, 5, 2]

# sort the list
prime_numbers.sort()
print(prime_numbers)

# Output: [2, 3, 5, 7, 11]

#####
# sort() Syntax
# The syntax of the sort() method is:
list.sort(key=..., reverse=...)
#Alternatively, you can also use Python's built-in sorted() function for 
# the same purpose.
sorted(list, key=..., reverse=...)

# sort() Parameters
# By default, sort() doesn't require any extra parameters. However, it has two 
# optional parameters:

# reverse - If True, the sorted list is reversed (or sorted in Descending order)
# key - function that serves as a key for the sort comparison. 

# sort() Return Value
# The sort() method doesn't return any value. Rather, it changes the original list.

# If you want a function to return the sorted list rather than change the original 
# list, use sorted().

# Sort in Descending order
# The sort() method accepts a reverse parameter as an optional argument.

# Setting reverse = True sorts the list in the descending order.

list.sort(reverse=True)
# Alternatively for sorted(), you can use the following code.

sorted(list, reverse=True)

##Example: Sort the list using key
# sorting using custom key
employees = [
    {'Name': 'Alan Turing', 'age': 25, 'salary': 10000},
    {'Name': 'Sharon Lin', 'age': 30, 'salary': 8000},
    {'Name': 'John Hopkins', 'age': 18, 'salary': 1000},
    {'Name': 'Mikhail Tal', 'age': 40, 'salary': 15000},
]

# custom functions to get employee info
def get_name(employee):
    return employee.get('Name')


def get_age(employee):
    return employee.get('age')


def get_salary(employee):
    return employee.get('salary')


# sort by name (Ascending order)
employees.sort(key=get_name)
print(employees, end='\n\n')

# sort by Age (Ascending order)
employees.sort(key=get_age)
print(employees, end='\n\n')

# sort by salary (Descending order)
employees.sort(key=get_salary, reverse=True)
print(employees, end='\n\n')




#====================

fitted_bol_arr = [None] * len(nums) # WILL GIVE an array in the 
#size of nums and all will be None or False depending what you want

#### USE WHILE LOOP when you want to change the "i" index to different one.


##############
# (Python) In the latest python version you can merge two dicts using the merge operator: 
x = {"key1": "value1 from x", "key2": "value2 from x"}
y = {"key2": "value2 from y", "key3": "value3 from y"}
x | y
#{'key1': 'value1 from x', 'key2': 'value2 from y', 'key3': 'value3 from y'}
y | x
#{'key2': 'value2 from x', 'key3': 'value3 from y', 'key1': 'value1 from x'}



#============================

# REMOVING AN ELEMENT FROM LIST WHILE ITTERATING

# We can’t just iterate over the original list and delete elements while 
# iterating because it messes the indexing

for elem in list_of_num:  # NOTE --> this will NOT work
#==========================
#We want to delete elements from the list while iterating over it, based on some 
# conditions like all occurrences of 54 and 55. For this, we need first to create 
# a copy of the list, and then we will iterate over that copied list. Then for 
# each element, we will check if we want to delete this element or not. If yes, 
# then delete that element from the original list using the remove() function. 
# For example

list_of_num = [51, 52, 53, 54, 55, 56, 57, 58, 59]
for elem in list(list_of_num):
    if elem == 54 or elem == 55:
        list_of_num.remove(elem)
print(list_of_num)

#Output
#[51, 52, 53, 56, 57, 58, 59]

#-------------
#Remove elements from a list while iterating using list comprehension
#-------------
#We can iterate over the list and select elements we want to keep in the new 
# list using list comprehension. Then we can assign the new list to the same 
# reference variable, which was part to the original list. For example,

list_of_num = [51, 52, 53, 54, 55, 56, 57, 58, 59]
# Remove all occurrences of 54 & 55 from list
list_of_num = [num for num in list_of_num if num != 54 and num !=55 ]
print(list_of_num)

# Output:
# [51, 52, 53, 56, 57, 58, 59]
# It created a new list, and then we assigned the new list back to the same 
# reference variable. So it gave an effect that we have removed elements from 
# the list while iterating over it. But internally, it created a new list.




#-------------
#Remove elements from a list while iterating using filter() function
#-------------
#Filter() function accepts two arguments,

# First is a Lambda function or any other function
# Second is the list from which we want to delete elements
# It iterates over all the elements from the list and applies the given function over each list element. During iteration, it yields the elements for which the given function returns True. So we can use the filter() function to filter elements from a list while iterating over it. For example

list_of_num = [51, 52, 53, 54, 55, 56, 57, 58, 59]
# Remove all occurrences of 54 & 55 from list
list_of_num = list(filter(lambda num: num != 54 and num !=55,
                          list_of_num)
                   )
print(list_of_num)
# Output:
# [51, 52, 53, 56, 57, 58, 59]